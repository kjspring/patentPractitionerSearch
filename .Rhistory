agentDensity <- as.data.table(matrix(nrow=num, col=2))
agentDensity <- data.table(matrix(nrow=num, col=2))
?as.data.table
agentDensity <- as.data.frame(matrix(nrow=num, col=2))
agentDensity <- as.data.frame(matrix(nrow=num, ncol=2))
num <- unique(region$DMA.Region.Code)
agentDensity <- as.data.frame(matrix(nrow=num, ncol=2))
codes <- unique(region$DMA.Region.Code)
numCodes <- length(codes)
agentDensity <- adata.frame(metroCode=codes,
numberAgent=NA,
nrow=numCodes,
ncol=2)
agentDensity <- data.frame(metroCode=codes,
numberAgent=NA,
nrow=numCodes,
ncol=2)
head(metroCode)
head(agentDensity)
agentDensity <- data.frame(metroCode=codes,
numberAgent=NA)
head(agentDensity)
i
nrow(dat[dat$metroCode == i], )
nrow(dat[dat$metroCode == i], )
dat$metroCode == i
dat[9998,]
dat <- dat[complete.cases(dat$metroCode),]
for( i in seq_along(codes) {
pop <- nrow(dat[dat$metroCode == codes[i], ] )
agentDensity$numberAgent[i] <- pop
}
for( i in seq_along(codes)) {
pop <- nrow(dat[dat$metroCode == codes[i], ] )
agentDensity$numberAgent[i] <- pop
}
pop
agentDensity
write.csv(agentDensity, "data/tidy/heatmappingData.csv")
library(googleVis)
?gvisGeoChart
head(agentDensity)
heatMapping <- function(dat) {
Gmap <- gvisGeoChart(dat, "metroCode", colorvar = "numberAgent",
options=list(region = reg_spec,
resolution = "metros",
displayMode="regions",
#colorAxis="{colors:['red', 'orange', 'yellow', 'blue', 'white']}",
backgroundColor="lightblue"), chartid="Density")
return(Gmap)
}
G <- heatMapping(agentDensity)
heatMapping <- function(dat) {
Gmap <- gvisGeoChart(dat, "metroCode", colorvar = "numberAgent",
options=list(region = "US",
resolution = "metros",
displayMode="regions",
#colorAxis="{colors:['red', 'orange', 'yellow', 'blue', 'white']}",
backgroundColor="lightblue"), chartid="Density")
return(Gmap)
}
G <- heatMapping(agentDensity)
plot(G)
str(agentDensity)
plot(G)
heatMapping <- function(dat) {
Gmap <- gvisGeoChart(dat, "metroCode", colorvar = "numberAgent",
options=list(region = "US",
resolution = "metros",
displayMode="regions",
#colorAxis="{colors:['red','white']}",
backgroundColor="lightblue"), chartid="Density")
return(Gmap)
}
G <- heatMapping(agentDensity)
plot(G)
heatMapping <- function(dat) {
Gmap <- gvisGeoChart(dat, "metroCode", colorvar = "numberAgent",
options=list(region = "US",
resolution = "metros",
displayMode="regions",
colorAxis="{colors:['red','white']}",
backgroundColor="lightblue"), chartid="Density")
return(Gmap)
}
plot(G)
G <- heatMapping(agentDensity)
plot(G)
heatMapping <- function(dat) {
Gmap <- gvisGeoChart(dat, "metroCode", colorvar = "numberAgent",
options=list(region = "US",
resolution = "metros",
displayMode="regions",
colorAxis="{colors:['red',
'orange', 'yellow', 'blue', 'white']}",
backgroundColor="lightblue"), chartid="Density")
return(Gmap)
}
G <- heatMapping(agentDensity)
plot(G)
heatMapping <- function(dat) {
Gmap <- gvisGeoChart(dat, "metroCode", colorvar = "numberAgent",
options=list(region = "US",
resolution = "metros",
displayMode="regions",
colorAxis="{colors:['white','blue','green', 'orange', 'red']}",
backgroundColor="lightblue"), chartid="Density")
return(Gmap)
}
G <- heatMapping(agentDensity)
plot(G)
heatMapping <- function(dat) {
Gmap <- gvisGeoChart(dat, "metroCode", colorvar = "numberAgent",
options=list(region = "US",
resolution = "metros",
displayMode="regions",
colorAxis="{colors:['white','blue', 'orange', 'red']}",
backgroundColor="lightblue"), chartid="Density")
return(Gmap)
}
G <- heatMapping(agentDensity)
plot(G)
head(region)
?sub
dat <- read.csv("data/tidy/workingDat.csv",
colClasses = "character") # Load patent agent registry
# load metro code data
region <- read.csv("data/raw/regions.csv",
colClasses = "character")
sub(region$DMA.Region, "Washington, DC (Hagerstown, MD)", "Washington, DC")
sub(region$State, "District of Columbia", "DC")
region <- read.csv("data/raw/regions.csv",
colClasses = "character")
sub(x = region$DMA.Region, pattern = "Washington, DC (Hagerstown, MD)",
replacement = "Washington, DC")
sub(x = region$State, pattern = "District of Columbia",
replacement = "DC")
region <- read.csv("data/raw/regions.csv",
colClasses = "character")
sub(x = region$DMA.Region, pattern = "Washington, DC (Hagerstown, MD)",
replacement = "Washington, DC")
region <- read.csv("data/raw/regions.csv",
colClasses = "character")
region$DMA.Region <- sub(x = region$DMA.Region, pattern = "Washington, DC (Hagerstown, MD)",
replacement = "Washington, DC")
dat <- dat[complete.cases(dat[,8]), ]
dat$city <- tolower(dat$city)
## Turn region city to all lower case
region$City <- tolower(region$City)
stateList <- unique(dat$state)
# State is always the last 2 characters in the DMA.Region.
# pull these out
region$State <- with(region, substring(DMA.Region, nchar(DMA.Region)-1, nchar(DMA.Region)))
region <- region[region$State %in% stateList,]
codes <- unique(region$DMA.Region.Code)
numCodes <- length(codes)
# metroCode |  numberAgent
agentDensity <- data.frame(metroCode=codes,
numberAgent=NA)
for(i in codes) {
# Make a vector of cities with that region code
cities <- region[region$DMA.Region.Code == i, ]$City # correct
states <- region[region$DMA.Region.Code == i, ]$State[1]
# Find these cities in the registry data set
dat$metroCode[dat$city %in% cities & dat$state %in% states] <- i
}
dat <- read.csv("data/tidy/workingDat.csv",
colClasses = "character") # Load patent agent registry
# load metro code data
region <- read.csv("data/raw/regions.csv",
colClasses = "character")
region$DMA.Region <- sub(x = region$DMA.Region, pattern = "Washington, DC (Hagerstown, MD)",
replacement = "Washington, DC")
# map city to region code
## Remove any of the registry data that has missing city values
dat <- dat[complete.cases(dat[,8]), ]
dat$city <- tolower(dat$city)
## Turn region city to all lower case
region$City <- tolower(region$City)
## Remove any data from the registry that does not match in city
#dat <- dat[dat$city %in% region$City, ]
# region <- region[region$City %in% dat$city, ]
# parse out the state information
stateList <- unique(dat$state)
region <- read.csv("data/raw/regions.csv",
colClasses = "character")
region <- read.csv("data/raw/regions.csv",
colClasses = "character")
region$DMA.Region <- sub(x = region$DMA.Region, pattern = "Washington, DC (Hagerstown, MD)",
replacement = "Washington, DC")
# map city to region code
## Remove any of the registry data that has missing city values
dat <- dat[complete.cases(dat[,8]), ]
dat$city <- tolower(dat$city)
## Turn region city to all lower case
region$City <- tolower(region$City)
## Remove any data from the registry that does not match in city
#dat <- dat[dat$city %in% region$City, ]
# region <- region[region$City %in% dat$city, ]
# parse out the state information
stateList <- unique(dat$state)
# State is always the last 2 characters in the DMA.Region.
# pull these out
region$State <- with(region, substring(DMA.Region, nchar(DMA.Region)-1, nchar(DMA.Region)))
region <- region[region$State %in% stateList,]
codes <- unique(region$DMA.Region.Code)
numCodes <- length(codes)
# metroCode |  numberAgent
agentDensity <- data.frame(metroCode=codes,
numberAgent=NA)
## Add a variable to the registry data to include the metro DMC
for(i in codes) {
# Make a vector of cities with that region code
cities <- region[region$DMA.Region.Code == i, ]$City # correct
states <- region[region$DMA.Region.Code == i, ]$State[1]
# Find these cities in the registry data set
dat$metroCode[dat$city %in% cities & dat$state %in% states] <- i
}
# Remove the data that does not have metro codes
dat <- dat[complete.cases(dat$metroCode),]
for( i in seq_along(codes)) {
pop <- nrow(dat[dat$metroCode == codes[i], ] )
agentDensity$numberAgent[i] <- pop
}
write.csv(agentDensity, "data/tidy/heatmappingData.csv")
eatMapping <- function(dat) {
Gmap <- gvisGeoChart(dat, "metroCode", colorvar = "numberAgent",
options=list(region = "US",
resolution = "metros",
displayMode="regions",
colorAxis="{colors:['white','blue', 'orange', 'red']}",
backgroundColor="lightblue"), chartid="Density")
return(Gmap)
}
heatMapping <- function(dat) {
Gmap <- gvisGeoChart(dat, "metroCode", colorvar = "numberAgent",
options=list(region = "US",
resolution = "metros",
displayMode="regions",
colorAxis="{colors:['white','blue', 'orange', 'red']}",
backgroundColor="lightblue"), chartid="Density")
return(Gmap)
}
G <- heatMapping(agentDensity)
plot(G)
dat <- read.csv("data/tidy/workingDat.csv",
colClasses = "character") # Load patent agent registry
# load metro code data
region <- read.csv("data/raw/regions.csv",
colClasses = "character")
region$DMA.Region <- sub(x = region$DMA.Region, pattern = "Washington, DC (Hagerstown, MD)",
replacement = "Washington, DC")
# map city to region code
## Remove any of the registry data that has missing city values
dat <- dat[complete.cases(dat[,8]), ]
dat$city <- tolower(dat$city)
## Turn region city to all lower case
region$City <- tolower(region$City)
stateList <- unique(dat$state)
stateList
unique(region$State)
length(unique(region$State))
head(region)
st <- read.csv("data/raw/states.csv")
head(st)
nrow(st)
length(unique(region$State)
)
i <- 1
for (i in seq_along(region$State)) {
sub(x = region$State, pattern = st$State[i], replacement = st$Abbreviation[i])
}
dat <- read.csv("data/tidy/workingDat.csv",
colClasses = "character") # Load patent agent registry
dat <- dat[dat$state != "PR", ]
comlete.cases(dat$city)
any(is.na(dat$city))
head(dat)
any(complete.cases(dat$city))
sum(complete.cases(dat$city))
dat <- dat[complete.cases(dat$city), ]
dat$city <- tolower(dat$city)
## Turn region city to all lower case
region$City <- tolower(region$City)
stateList <- unique(dat$state)
stateList <- unique(dat$state)
stateList
dat <- dat[dat$state %in% region$State, ]
dat <- read.csv("data/tidy/workingDat.csv",
colClasses = "character") # Load patent agent registry
# load metro code data
region <- read.csv("data/raw/regions.csv",
colClasses = "character")
region$DMA.Region <- sub(x = region$DMA.Region, pattern = "Washington, DC (Hagerstown, MD)",
replacement = "Washington, DC")
st <- read.csv("data/raw/states.csv")
# convert metro code state data to state Abbreviation
for (i in seq_along(region$State)) {
sub(x = region$State, pattern = st$State[i], replacement = st$Abbreviation[i])
}
# Remove Puerto Rico agents
dat <- dat[dat$state != "PR", ]
# map city to region code
## Remove any of the registry data that has missing city values
dat <- dat[complete.cases(dat$city), ]
dat$city <- tolower(dat$city)
## Turn region city to all lower case
region$City <- tolower(region$City)
## Remove any data from the registry that does not match in city
#dat <- dat[dat$city %in% region$City, ]
# region <- region[region$City %in% dat$city, ]
# parse out the state information
stateList <- unique(dat$state)
unique(region$State)
# convert metro code state data to state Abbreviation
for (i in seq_along(region$State)) {
region$State <- sub(x = region$State, pattern = st$State[i], replacement = st$Abbreviation[i])
}
dat <- dat[dat$state %in% region$State, ]
unique(region$State)
dat <- read.csv("data/tidy/workingDat.csv",
colClasses = "character") # Load patent agent registry
# load metro code data
region <- read.csv("data/raw/regions.csv",
colClasses = "character")
region$DMA.Region <- sub(x = region$DMA.Region, pattern = "Washington, DC (Hagerstown, MD)",
replacement = "Washington, DC")
which(region$DMA.Region == "Washington, DC")
sub(x = region$DMA.Region, pattern = "Washington, DC (Hagerstown, MD)",
replacement = "Washington, DC")
which(region$DMA.Region == "Washington, DC")
which(region$DMA.Region == "Washington, DC (Hagerstown, MD)")
region$DMA.Region[region$DMA.Region == "Washington, DC (Hagerstown, MD)"] <- "Washington, DC"
which(region$DMA.Region == "Washington, DC (Hagerstown, MD)")
which(region$DMA.Region == "Washington, DC")
dat <- read.csv("data/tidy/workingDat.csv",
colClasses = "character") # Load patent agent registry
# load metro code data
region <- read.csv("data/raw/regions.csv",
colClasses = "character")
region$DMA.Region[region$DMA.Region == "Washington, DC (Hagerstown, MD)"] <- "Washington, DC"
st <- read.csv("data/raw/states.csv")
# convert metro code state data to state Abbreviation
for (i in seq_along(region$State)) {
region$State[region$State == st$State[i]] <- st$Abbreviation[i]
}
dat <- dat[dat$state != "PR", ]
dat <- dat[complete.cases(dat$city), ]
dat$city <- tolower(dat$city)
region$City <- tolower(region$City)
dat1 <- dat[dat$city %in% region$City, ]
dat <- dat[dat$city %in% region$City, ]
unique(dat$state)
unique(region$State)
head(st)
seq_along(region$State)
i <- 1
st$State[i]
dat <- read.csv("data/tidy/workingDat.csv",
colClasses = "character") # Load patent agent registry
# load metro code data
region <- read.csv("data/raw/regions.csv",
colClasses = "character")
region$DMA.Region[region$DMA.Region == "Washington, DC (Hagerstown, MD)"] <- "Washington, DC"
st <- read.csv("data/raw/states.csv", colClasses = "character")
st$State[i]
st$Abbreviation[i]
for (i in seq_along(unique(region$State))) {
region$State[region$State == st$State[i]] <- st$Abbreviation[i]
}
unique(region$State)
# Remove Puerto Rico agents
dat <- dat[dat$state != "PR", ]
# map city to region code
## Remove any of the registry data that has missing city values
dat <- dat[complete.cases(dat$city), ]
dat$city <- tolower(dat$city)
## Turn region city to all lower case
region$City <- tolower(region$City)
## Remove any data from the registry that does not match in city
dat <- dat[dat$city %in% region$City, ]
dat <- dat[dat$state %in% region$State, ]
codes <- unique(region$DMA.Region.Code)
numCodes <- length(codes)
# metroCode |  numberAgent
agentDensity <- data.frame(metroCode=codes,
numberAgent=NA)
for(i in codes) {
# Make a vector of cities with that region code
cities <- region[region$DMA.Region.Code == i, ]$City # correct
states <- region[region$DMA.Region.Code == i, ]$State[1]
# Find these cities in the registry data set
dat$metroCode[dat$city %in% cities & dat$state %in% states] <- i
}
length(complete.cases(dat$metroCode))
dat <- dat[complete.cases(dat$metroCode),]
dat <- read.csv("data/tidy/workingDat.csv",
colClasses = "character") # Load patent agent registry
# load metro code data
region <- read.csv("data/raw/regions.csv",
colClasses = "character")
region$DMA.Region[region$DMA.Region == "Washington, DC (Hagerstown, MD)"] <- "Washington, DC"
st <- read.csv("data/raw/states.csv", colClasses = "character")
# convert metro code state data to state Abbreviation
for (i in seq_along(unique(region$State))) {
region$State[region$State == st$State[i]] <- st$Abbreviation[i]
}
# Remove Puerto Rico agents
dat <- dat[dat$state != "PR", ]
# map city to region code
## Remove any of the registry data that has missing city values
dat <- dat[complete.cases(dat$city), ]
dat$city <- tolower(dat$city)
## Turn region city to all lower case
region$City <- tolower(region$City)
## Remove any data from the registry that does not match in city
dat <- dat[dat$city %in% region$City, ]
# region <- region[region$City %in% dat$city, ]
# parse out the state information
#stateList <- unique(dat$state)
# region <- region[region$State %in% stateList,] need to do reverse
dat <- dat[dat$state %in% region$State, ]
codes <- unique(region$DMA.Region.Code)
numCodes <- length(codes)
# metroCode |  numberAgent
agentDensity <- data.frame(metroCode=codes,
numberAgent=NA)
## Add a variable to the registry data to include the metro DMC
for(i in codes) {
# Make a vector of cities with that region code
cities <- region[region$DMA.Region.Code == i, ]$City # correct
states <- region[region$DMA.Region.Code == i, ]$State[1]
# Find these cities in the registry data set
dat$metroCode[dat$city %in% cities & dat$state %in% states] <- i
}
dat[!(complete.cases(dat$metroCode)), ]$city
unique(dat[!(complete.cases(dat$metroCode)), ]$state)
dat[is.na(dat$metroCode),]
dat[is.na(dat$metroCode),]$state
for( i in seq_along(codes)) {
pop <- nrow(dat[dat$metroCode == codes[i], ] )
agentDensity$numberAgent[i] <- pop
}
write.csv(agentDensity, "data/tidy/heatmappingData.csv")
heatMapping <- function(dat) {
Gmap <- gvisGeoChart(dat, "metroCode", colorvar = "numberAgent",
options=list(region = "US",
resolution = "metros",
displayMode="regions",
colorAxis="{colors:['white','blue', 'orange', 'red']}",
backgroundColor="lightblue"), chartid="Density")
return(Gmap)
}
coSums(agentDensity)
colSums(agentDensity)
sum(agentDensity$numberAgent)
agentDensity
dat <- dat[complete.cases(dat$metroCode),]
for( i in seq_along(codes)) {
pop <- nrow(dat[dat$metroCode == codes[i], ] )
agentDensity$numberAgent[i] <- pop
}
write.csv(agentDensity, "data/tidy/heatmappingData.csv")
heatMapping <- function(dat) {
Gmap <- gvisGeoChart(dat, "metroCode", colorvar = "numberAgent",
options=list(region = "US",
resolution = "metros",
displayMode="regions",
colorAxis="{colors:['white','blue', 'orange', 'red']}",
backgroundColor="lightblue"), chartid="Density")
return(Gmap)
}
heatMapping(agentDensity)
G <- heatMapping(agentDensity)
plot(G)
setwd("~/projects/dataDevProj/scripts")
setwd("~/projects/dataDevProj/documentation/pitch")
library(googleVis)
dat <- read.csv("heatmappingData.csv")
heatMapping <- function(dat) {
Gmap <- gvisGeoChart(dat, "metroCode", colorvar = "numberAgent",
options=list(region = "US",
resolution = "metros",
displayMode="regions",
colorAxis="{colors:['white','blue', 'orange', 'red']}",
backgroundColor="lightblue"), chartid="Density")
return(Gmap)
}
G <- heatMapping(dat)
plot(G)
library(slidify)
slidify("index.Rmd")
library(knitr)
browseURL("index.html")
library(knitr)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
G <-  heatMapping(dat)
plot(G)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
