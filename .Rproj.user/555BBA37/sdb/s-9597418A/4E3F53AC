{
    "contents" : "---\ntitle: \"Documentation\"\nauthor: \"Kevin Spring\"\ndate: \"08/11/2014\"\noutput: html_document\nruntime: shiny\n---\n\n# Downloading and Cleaning the data\n* The United States Patent and Trademark Office (USPTO) contains a list of all patent agents and attorneys that are registered and allowed to prosecute patent applications before the USPTO.\n* 42,624 patent practitioners are registered\n\n* The first step is to download and load the data\n\n```{r}\nfileURL <- 'http://www.uspto.gov/ip/boards/oed/attorney-roster/attorney.zip'\n\ndownload.file(fileURL, \"data/raw/roster.zip\")\nunzip(\"data/raw/roster.zip\", exdir=\"data/raw\")\ndat <- read.table(\"data/raw/WebRoster.txt\", \n                  header=F, sep=\",\",\n                  colClasses = \"character\")\n\ncolnames(dat) <- c(\"lastName\", \"firstName\", \n                   \"middleName\", \"suffix\", \n                   \"firm\", \"address1\", \n                   \"address2\", \"address3\", \n                   \"city\", \"state\", \n                   \"country\", \"zip\", \n                   \"telephone\", \"registrationNumber\", \n                   \"classification\")\n\n```\n\n# Tidy the data\n* The data is extremely messy.\n* Looks like the USPTO stores the data as entered by the practitioner.\n* For example, no standard phone number and addresses are mixed with firm names in a specific variable.\n* There is an empty variable at the end\n* Missing data can be listed as nothing entered or '--'\n\n```{r}\n# Remove last NA column\ndat <- dat[,-16]\n\n# Clean up the telephone data\ndat[dat == \"\"] <- NA\ndat[dat == \"--\"] <- NA\n\n# Put the extensions into its own column\ndat$ext <- \"\"\nEXTs <- grep(\"EXT\", dat$telephone)\n\nfor (i in 1:length(EXTs)) {\n  sp <- strsplit(dat[EXTs[i],]$telephone, \"EXT\")\n  dat[EXTs[i],]$telephone <- sp[[1]][1]\n  dat[EXTs[i],]$ext <- sp[[1]][2]\n}\n```\n\n# Getting Latitude and longitudinal data for each address\n* Will use the the central latitude and logitude value for the specific zip code of the user and the patent practitioner address\n* zip code data downloaded from http://greatdata.com/free-zip-code-database\n* Accessed 2014-08-12\n\n```{r}\nfileURL <- \"http://greatdata.com/free-zip-code-database\"\ndownload.file(fileURL, \"data/raw/roster.zip\")\nunzip(zipfile=\"data/raw/free-zip-code-database.zip\", \n      files = \"free-zip-code-database.csv\",\n      exdir=\"data/raw\")\nzips <- read.csv(\"data/raw/free-zip-code-database.csv\",\n                 colClasses = \"character\") # zip code nees to be char\nzips$Latitude <- as.numeric(zips$Latitude) # set long lat as numeric\nzips$Longitude <- as.numeric(zips$Longitude)\n```\n\n# Clean up the Zip code variable\n* Will be mapping the geolocation information of each zip code with the zip code listed for the work address of the patent practitioner.\n* Some zip codes listed in the 5+4 format\n* Remove any records of missing data in the zip code\n\n```{r}\n# Remove any international addresses\ndat <- dat[dat$country == \"US\", ]\n\n# Some zip codes do not have a \"-\" separator. So look for any larger\n# than 5 characters and save only the first 5\nlongzip <- which(nchar(dat$zip)>5)\n\nfor (i in seq_along(longzip)) {\n  zipsplit <- substr(dat$zip[i], start=1, stop=5)\n  dat[longzip[i], ]$zip = zipsplit[i]\n}\n\n# Clean up the zip code data / not necessary since above\n# ZIPs <- grep(\"-\", dat$zip)\n\n#for (i in seq_along(ZIPs)) {\n#  sp <- strsplit(dat[ZIPs[i],]$zip, \"-\")\n#  dat[ZIPs[i],]$zip <- sp[[1]][1]\n#}\n\n# Remove any zip codes less than 5 numbers\nshortzip <- which(nchar(dat$zip)<5)\ndat <- dat[-shortzip, ]\n\n# Remove any data that has missing zip code data\ndat <- dat[-complete.cases(dat$zip),]\n\n# Remove any data that doesn't have any matching zip codes\ndat <- dat[dat$zip %in% zips$ZIPCode, ]\n\n```\n\n# Add the geolocation data to the patent practitioner roster\n* Will be mapping the geolocation information of each zip code with the zip code listed for the work address of the patent practitioner.\n\n```{r}\n# Make latitude and longitude variables\ndat$latitude <- NA\ndat$longitude <- NA\n\nzips <- zips[zips$ZIPCode %in% dat$zip,] # remove some geolocations\n\n#for(i in seq_along(dat$zip)) { # takes a while\n#  rownum <- which(zips$ZIPCode == dat$zip[i] )\n#  dat$latitude[i] <- zips$Latitude[rownum] \n#  dat$longitude[i] <- zips$Longitude[rownum] \n\nfor(i in seq_along(zips$ZIPCode)) { # takes a while to run\n  rownum <- which(dat$zip == zips$ZIPCode[i])  # search geolocation\n  dat$latitude[rownum] <- zips$Latitude[i] # save latitude\n  dat$longitude[rownum] <- zips$Longitude[i] # save longitude\n}\n\nwrite.csv(dat, \"data/raw/workingDat.csv\") # Write the data\n```\n\n# Next step is to build the site\n\n* Have a heat map of United States with red=lots of agents and blue=not so many (need to map lat/long to map plot)\n* User will enter their zip code and radius of the search\n* User can check how many practitioners will be listed\n* User can check a box to display only Agents, Attorneys or both.\n\n## User inputs\n\n* Zip code (text input)\n* radius (text input)\n* Agent/Attorney/Both (check box)\n* Total results displayed (drop down)\n\n## Output\n\n* Heat map zooms into area and puts dots where located\n* List of agents in a javascript sortable table displayed\n* Default sorted by closest to entered zip and then by last name.\n* First Middle Last Address Phone Agent/Attorney listed\n\n## Front end development\n* Navigation bar links to this documentation, github repository, data, and web app\n* 3 main sections of the user site: user input, map, and list of results\n\n### user Input\n\n### Map Results\n\n### List of results\n\n## Back end development\n\n### Calling the find function\n\n### Rendering the map",
    "created" : 1407792741708.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "372687609",
    "id" : "4E3F53AC",
    "lastKnownWriteTime" : 1407897093,
    "path" : "~/projects/dataDevProj/documentation/doc.Rmd",
    "project_path" : "documentation/doc.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}