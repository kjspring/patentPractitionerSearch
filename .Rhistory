nrow(datFind)
shiny::runApp()
help(map)
map(world)
map("world")
?map
map("zip")
shiny::runApp()
library(googleVis)
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width =
height = 400))
print(G, "chart")
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width =
height = 400))
print(G, "chart")
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width = 400, height = 400))
G
print(G, "chart")
print(G, "chart")
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
install.packages('googleVis')
install.packages("googleVis")
install.packages(c("devtools","RJSONIO", "knitr", "shiny", "httpuv"))
library(googleVis)
demo(WorldBank) #
df <- data.frame(label=c("US", "GB", "BR"), val1=c(1,3,4), val2=c(23,12,32))
Line <- gvisLineChart(df, xvar="label", yvar=c("val1","val2"),
options=list(title="Hello World", legend="bottom",
titleTextStyle="{color:'red', fontSize:18}",
vAxis="{gridlines:{color:'red', count:3}}",
hAxis="{title:'My Label', titleTextStyle:{color:'blue'}}",
series="[{color:'green', targetAxisIndex: 0},
{color: 'blue',targetAxisIndex:1}]",
vAxes="[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType="function", width=500, height=300
))
plot(Line)
library(XML)
eq <- read.csv("http://earthquake.usgs.gov/earthquakes/feed/v0.1/summary/2.5_week.csv")
eq$loc=paste(eq$Latitude, eq$Longitude, sep=":")
head(eq)
?gvisGeoChart
dat
datFind
zip <- "77573"
check
check <= "AGENT"
check <- "AGENT"
radius <- 1
dat$latitude <- as.numeric(dat$latitude) # set long lat as numeric
dat$longitude <- as.numeric(dat$longitude)
dat$loc <- paste(dat$latitude, dat$longitude, sep=":")
# Read the zip code data
# hidden because run once with server open
#zips <- read.csv("data/raw/free-zip-code-database.csv",
#                 colClasses = "character") # zip code nees to be char
zips$Latitude <- as.numeric(zips$Latitude) # set long lat as numeric
zips$Longitude <- as.numeric(zips$Longitude)
# Subset the practitioner data for only lon/lat & index
datSub <- dat[,19:18]
# Need to check if proper zip code input by user
if(nchar(zip) > 5 | nchar(zip) < 5) {
stop("Please enter only a 5 digit zip code.")
}
# Find the longitude/latitude of the user entered zip code
coordZip <- zips[zips$ZIPCode %in% zip,][6:5]
# distant matrix distance between datSub and user inputted zip)
dist <- rdist.earth(datSub, coordZip)
# which of the distances are less than the radius
index <- which(dist < radius)
datFind <- dat[index, ]
library(fields)
dat$latitude <- as.numeric(dat$latitude) # set long lat as numeric
dat$longitude <- as.numeric(dat$longitude)
dat$loc <- paste(dat$latitude, dat$longitude, sep=":")
# Read the zip code data
# hidden because run once with server open
#zips <- read.csv("data/raw/free-zip-code-database.csv",
#                 colClasses = "character") # zip code nees to be char
zips$Latitude <- as.numeric(zips$Latitude) # set long lat as numeric
zips$Longitude <- as.numeric(zips$Longitude)
# Subset the practitioner data for only lon/lat & index
datSub <- dat[,19:18]
# Need to check if proper zip code input by user
if(nchar(zip) > 5 | nchar(zip) < 5) {
stop("Please enter only a 5 digit zip code.")
}
# Find the longitude/latitude of the user entered zip code
coordZip <- zips[zips$ZIPCode %in% zip,][6:5]
# distant matrix distance between datSub and user inputted zip)
dist <- rdist.earth(datSub, coordZip)
# which of the distances are less than the radius
index <- which(dist < radius)
datFind <- dat[index, ]
head(eq)
G <- gvisGeoChart(dat, "loc",
options=list(displayMode="Markers",
colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="Patent")
plot(G)
G <- gvisGeoChart(datFind, "loc",
options=list(displayMode="Markers",
colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="Patent")
plot(G)
G <- gvisGeoChart(datFind, "loc",
options=list(region = "US",
displayMode="Markers",
colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="Patent")
plot(G)
G <- gvisGeoChart(datFind, "loc",
options=list(region = "TX",
displayMode="Markers",
colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="Patent")
plot(G)
G <- gvisGeoChart(datFind, "loc",
options=list(region = "TX",
displayMode="Markers",
colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue",
resolution="counties"), chartid="Patent")
plot(G)
G <- gvisGeoChart(datFind, "loc",
options=list(region = "TX",
displayMode="Markers",
colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue",
resolution="provinces"), chartid="Patent")
plot(G)
G <- gvisGeoChart(datFind, "loc",
options=list(region = "US",
displayMode="Markers",
colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue",
resolution="provinces"), chartid="Patent")
plot(G)
G <- gvisGeoChart(datFind, "loc",
options=list(region = "US",
displayMode="Markers",
colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue",
resolution="counties"), chartid="Patent")
plot(G)
G <- gvisGeoChart(datFind, "loc",
options=list(region = "US",
displayMode="Markers",
colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue",
resolution="county"), chartid="Patent")
plot(G)
G <- gvisGeoChart(datFind, "loc",
options=list(region = "021",
displayMode="Markers",
colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="Patent")
plot(G)
radius <- 500
G <- gvisGeoChart(datFind, "loc",
options=list(region = "US",
resolution = "metros"
displayMode="Markers",
colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="Patent")
plot(G)
G <- gvisGeoChart(datFind, "loc",
options=list(region = "US",
resolution = "metros",
displayMode="Markers",
colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="Patent")
plot(G)
G <- gvisGeoChart(datFind, "loc",
options=list(region = "US",
resolution = "metros",
displayMode="Markers",
# colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="Patent")
plot(G)
dat$latitude <- as.numeric(dat$latitude) # set long lat as numeric
dat$longitude <- as.numeric(dat$longitude)
dat$loc <- paste(dat$latitude, dat$longitude, sep=":")
# Read the zip code data
# hidden because run once with server open
#zips <- read.csv("data/raw/free-zip-code-database.csv",
#                 colClasses = "character") # zip code nees to be char
zips$Latitude <- as.numeric(zips$Latitude) # set long lat as numeric
zips$Longitude <- as.numeric(zips$Longitude)
# Subset the practitioner data for only lon/lat & index
datSub <- dat[,19:18]
# Need to check if proper zip code input by user
if(nchar(zip) > 5 | nchar(zip) < 5) {
stop("Please enter only a 5 digit zip code.")
}
# Find the longitude/latitude of the user entered zip code
coordZip <- zips[zips$ZIPCode %in% zip,][6:5]
# distant matrix distance between datSub and user inputted zip)
dist <- rdist.earth(datSub, coordZip)
# which of the distances are less than the radius
index <- which(dist < radius)
datFind <- dat[index, ]
G <- gvisGeoChart(datFind, "loc",
options=list(region = "US",
resolution = "metros",
displayMode="Markers",
# colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="Patent")
plot(G)
zip <- "73301"
reg_spec <- "US-TX"
G <- gvisGeoChart(datFind, "loc",
options=list(region = reg_spec,
resolution = "metros",
displayMode="Markers",
# colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="Patent")
plot(G)
G <- gvisGeoChart(datFind, "loc",
options=list(region = reg_spec,
magnifyingGlass = FALSE,
resolution = "metros",
displayMode="Markers",
# colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="Patent")
plot(G)
G <- gvisGeoChart(datFind, "loc",
options=list(region = reg_spec,
magnifyingGlass.enable = FALSE,
resolution = "metros",
displayMode="Markers",
# colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="Patent")
plot(G)
zip
zipDat <- zips
head(zipDat)
zip %in% zipDat$ZIPCode
zipDat[zipDat$ZIPCode %in% zip,]$State[1]
reg_spec <- paste("US", state, sep="-")
state <- zipDat[zipDat$ZIPCode %in% zip,]$State[1]
reg_spec <- paste("US", state, sep="-")
reg_spec
mapping <- function(dat, zipDat, zip_usr) {
state <- zipDat[zipDat$ZIPCode %in% zip,]$State[1]
reg_spec <- paste("US", state, sep="-")
Gmap <- gvisGeoChart(dat, "loc",
options=list(region = reg_spec,
#magnifyingGlass.enable = FALSE,
resolution = "metros",
displayMode="Markers",
# colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="Patent")
print(Gmap)
}
mapping(datFind, zips, zip)
mapping <- function(dat, zipDat, zip_usr) {
state <- zipDat[zipDat$ZIPCode %in% zip,]$State[1]
reg_spec <- paste("US", state, sep="-")
Gmap <- gvisGeoChart(dat, "loc",
options=list(region = reg_spec,
#magnifyingGlass.enable = FALSE,
resolution = "metros",
displayMode="Markers",
# colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="Patent")
plot(Gmap)
}
mapping(datFind, zips, zip)
mapping <- function(dat, zipDat, zip_usr) {
state <- zipDat[zipDat$ZIPCode %in% zip,]$State[1]
reg_spec <- paste("US", state, sep="-")
Gmap <- gvisGeoChart(dat, "loc",
options=list(region = reg_spec,
#magnifyingGlass.enable = FALSE,
resolution = "metros",
displayMode="Markers",
# colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="Patent")
return(Gmap)
}
mapping(datFind, zips, zip)
shiny::runApp()
shiny::runApp()
?renderGvis
shiny::runApp()
source("scripts/mapping.R")
# Filename: global.R
library(googleVis)
source("scripts/find.R")
source("scripts/helpers.R")
source("scripts/mapping.R")
shiny::runApp()
# Find and subset practitioners from user input
library(fields)
# test data
#zip <- "77054"
#radius <- 5 # miles
#check = "AGENT"
find <- function(dat, zips, zip, radius, check) {
# Read the registered practitioner working data
# Hidden so only read once when server started
#dat <- read.csv("data/tidy/workingDat.csv",
#                colClasses = "character")
dat$latitude <- as.numeric(dat$latitude) # set long lat as numeric
dat$longitude <- as.numeric(dat$longitude)
dat$loc <- paste(dat$latitude, dat$longitude, sep=":")
# Read the zip code data
# hidden because run once with server open
#zips <- read.csv("data/raw/free-zip-code-database.csv",
#                 colClasses = "character") # zip code nees to be char
zips$Latitude <- as.numeric(zips$Latitude) # set long lat as numeric
zips$Longitude <- as.numeric(zips$Longitude)
# Subset the practitioner data for only lon/lat & index
datSub <- dat[,19:18]
# Need to check if proper zip code input by user
if(nchar(zip) > 5 | nchar(zip) < 5) {
stop("Please enter only a 5 digit zip code.")
}
# Find the longitude/latitude of the user entered zip code
coordZip <- zips[zips$ZIPCode %in% zip,][6:5]
# distant matrix distance between datSub and user inputted zip)
dist <- rdist.earth(datSub, coordZip)
# which of the distances are less than the radius
index <- which(dist < radius)
datFind <- dat[index, ]
# If the data frame is empty return an error saying none found
if(nrow(datFind) == 0) {
stop("No patent agents found in the area specified")
}
# Also subset by input search of Attorney/Agent/Both
if(length(check == 2)) {
return(datFind[,-1])
} else {
datFind <- datFind[datFind$classification==check, ]
return(datFind[,-1,])
}
}
zips <- read.csv("data/raw/free-zip-code-database.csv",
colClasses = "character") # Load zip code data
dat <- read.csv("data/tidy/workingDat.csv",
colClasses = "character") # Load patent agent registry
counties <- readRDS("data/raw/counties.rds")
zip <- "90210"
radius <- 1
check = c("ATTORNEY", "AGENT")
a <- find(dat, zips, zip, radius, check)
a
mapping(a, zips, zip)
G <- mapping(a, zips, zip)
plot(G)
shiny::runApp()
shiny::runApp()
check
length(c("ATTORNEY", "AGENT"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
zips <- read.csv("data/raw/free-zip-code-database.csv",
colClasses = "character") # Load zip code data
dat <- read.csv("data/tidy/workingDat.csv",
colClasses = "character") # Load patent agent registry
zip <- "77054"
radius <- 5 # miles
check = "AGENT"
dat$latitude <- as.numeric(dat$latitude) # set long lat as numeric
dat$longitude <- as.numeric(dat$longitude)
dat$loc <- paste(dat$latitude, dat$longitude, sep=":")
# Read the zip code data
# hidden because run once with server open
#zips <- read.csv("data/raw/free-zip-code-database.csv",
#                 colClasses = "character") # zip code nees to be char
zips$Latitude <- as.numeric(zips$Latitude) # set long lat as numeric
zips$Longitude <- as.numeric(zips$Longitude)
# Subset the practitioner data for only lon/lat & index
datSub <- dat[,19:18]
# Find the longitude/latitude of the user entered zip code
coordZip <- zips[zips$ZIPCode %in% zip,][6:5]
# distant matrix distance between datSub and user inputted zip)
dist <- rdist.earth(datSub, coordZip)
index <- which(dist < radius)
datFind <- dat[index, ]
datFind <- datFind[datFind$classification==check, ]
str(datFind)
mapping <- function(dat, zipDat, zip_usr) {
state <- zipDat[zipDat$ZIPCode %in% zip_usr,]$State[1]
reg_spec <- paste("US", state, sep="-")
Gmap <- gvisGeoChart(dat, "loc",
options=list(region = reg_spec,
#magnifyingGlass.enable = FALSE,
resolution = "metros",
displayMode="Markers",
# colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="Patent")
return(Gmap)
}
G <- mapping(datFind, zips, zip)
plot(G)
shiny::runApp()
shiny::runApp()
?gvisGeoChart
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
library(googleVis)
source("scripts/find.R")
source("scripts/helpers.R")
source("scripts/mapping.R")
zips <- read.csv("data/raw/free-zip-code-database.csv",
colClasses = "character") # Load zip code data
dat <- read.csv("data/tidy/workingDat.csv",
colClasses = "character") # Load patent agent registry
zip <- "77054"
radius <- 5 # miles
check = "AGENT"
dat$latitude <- as.numeric(dat$latitude) # set long lat as numeric
dat$longitude <- as.numeric(dat$longitude)
dat$loc <- paste(dat$latitude, dat$longitude, sep=":")
# Read the zip code data
# hidden because run once with server open
#zips <- read.csv("data/raw/free-zip-code-database.csv",
#                 colClasses = "character") # zip code nees to be char
zips$Latitude <- as.numeric(zips$Latitude) # set long lat as numeric
zips$Longitude <- as.numeric(zips$Longitude)
# Subset the practitioner data for only lon/lat & index
datSub <- dat[,19:18]
# Find the longitude/latitude of the user entered zip code
coordZip <- zips[zips$ZIPCode %in% zip,][6:5]
# distant matrix distance between datSub and user inputted zip)
dist <- rdist.earth(datSub, coordZip)
# which of the distances are less than the radius
index <- which(dist < radius)
datFind <- dat[index, ]
# If the data frame is empty return an error saying none found
if(nrow(datFind) == 0) {
stop("No patent agents found in the area specified")
}
datFind <- datFind[datFind$classification==check, ]
a <- datFind
shiny::runApp()
?gvisGeoChart
?renderGvis
shiny::runApp()
shiny::runApp()
shiny::runApp()
?gvisGeoChart
shiny::runApp()
shinyapps::setAccountInfo(
name="stochastic",
token="186446C76ECECCC125AFF8E7FB5C21C7",
secret="<SECRET>")
shinyapps::setAccountInfo(
name="stochastic",
token="186446C76ECECCC125AFF8E7FB5C21C7",
secret="8r6EYxBKhM6Iko+sHjmyheQuvPIXBV6UfoikNLEa")
shiny::runApp()
deployApp()
library(shinyapps)
deployApp()
deployApp()
deployApp()
shiny::runApp()
shiny::runApp()
deployApp()
?configureApp
configureApp("dataDevProj", size="medium")
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?tabPanel
?navPage
?navbarPage
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?tabPanel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?tabsetPanel
shiny::runApp()
shiny::runApp()
shiny::runApp()
?shinyUI
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
?gvisGeoChart
shiny::runApp()
deployApp()
